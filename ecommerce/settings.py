"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from cryptography.fernet import Fernet
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-wv9#9blt_f+^kulwc814%xh7&=&taw4++o!psah#6!a_#ro=ls'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Social Login (Django Allauth)
SITE_ID = 1  # Required for allauth

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #'rest_framework',  # Django Rest Framework
    
    'users',           # Users app
    'products',        # Products app
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',  # Add more providers if needed
    'captcha',  # Add captcha
    'axes',  # Add Django Axes

    #'django_otp',
    #'django_otp.plugins.otp_totp',  # TOTP devices
    #'django_otp.plugins.otp_static',  # Static token devices
    #'django_otp.plugins.otp_email',  # Email-based tokens
    #'two_factor',
    'oauth2_provider',  # Add OAuth2 Provider
    'widget_tweaks',  # Add Widget Tweaks
    'django_extensions',  # Add Django Extensions
]


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
    'axes.backends.AxesBackend',  # Axes Backend
    'django.contrib.auth.backends.ModelBackend',  # Default Auth Backend

    'oauth2_provider.backends.OAuth2Backend',
    'django.contrib.auth.backends.ModelBackend',
    
]

# Axes Configuration
# Axes Configuration (User + IP Combination Lockout)
#AXES_LOCK_OUT_BY_COMBINATION_USER_AND_IP = False
AXES_USERNAME_FORM_FIELD = 'username'  # Use username to track failures
AXES_LOCKOUT_PARAMETERS = ['username']  # Lock users based on username alone
AXES_COOLOFF_TIME = 1  # Cooldown time in hours after lockout
AXES_FAILURE_LIMIT = 5  # Maximum allowed failed login attempts
AXES_RESET_ON_SUCCESS = True  # Reset on successful login
#AXES_ONLY_USER_FAILURES = True  # Track by user, not IP


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'axes.middleware.AxesMiddleware',
    #'django_otp.middleware.OTPMiddleware',
    #'users.middleware.enforce_mfa',  # Custom MFA middleware
    #'users.middleware.Enforce2FAMiddleware',  # Correctly point to the middleware class
    'django_otp.middleware.OTPMiddleware',  # OTP middleware
]

ROOT_URLCONF = 'ecommerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'ecommerce/templates'],  # Points to ecommerce/templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce.wsgi.application'


# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'myapp': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Add Social App Credentials (Google)
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': 'GOOGLE_CLIENT_ID',
            'secret': 'GOOGLE_CLIENT_SECRET',
            'key': ''
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        'URL': 'http://127.0.0.1:9200/',
        'INDEX_NAME': 'products',
    },
}


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

# Directories where Django will search for static files during development
STATICFILES_DIRS = [
    BASE_DIR / 'ecommerce/static',  # Static files in the ecommerce app
    BASE_DIR / 'products/static',   # Static files in the products app
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'users.CustomUser'

CART_SESSION_ID = 'cart'

LOGIN_REDIRECT_URL = '/dashboard/'

LOGIN_URL = '/users/login/'

LOGOUT_REDIRECT_URL = '/users/login/'

LOGIN_REDIRECT_URL = '/users/login/'  # Or any other default page

ACCOUNT_LOGOUT_REDIRECT_URL = '/users/login/'  # Redirect after logout

LOGIN_REDIRECT_URL = '/users/dashboard/'  # Redirect after login

LOGOUT_REDIRECT_URL = '/users/login/'  # Redirect after logout

# Optional (customize login/logout URLs)
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = True


# Path where collectstatic will collect static files for production
STATIC_ROOT = BASE_DIR / 'staticfiles'  # This points to a directory named staticfiles at the project root

LOGIN_REDIRECT_URL = 'homepage'

LOGOUT_REDIRECT_URL = 'homepage'

# reCAPTCHA Keys
#RECAPTCHA_PUBLIC_KEY = '6Lep37EqAAAAADk30ncFDl9qWq3ss7yYJKNCNsM4'
#RECAPTCHA_PRIVATE_KEY = '6Lep37EqAAAAAESz9vg4zQ3U2isYBSytPmF9Eysb'
CAPTCHA_FONT_SIZE = 42
CAPTCHA_LENGTH = 6
CAPTCHA_LETTER_ROTATION = (-35, 35)
CAPTCHA_BACKGROUND_COLOR = '#ffffff'
CAPTCHA_FOREGROUND_COLOR = '#001100'
CAPTCHA_NOISE_FUNCTIONS = ('captcha.helpers.noise_arcs', 'captcha.helpers.noise_dots')
# Optional: Set reCAPTCHA to required for forms
#RECAPTCHA_REQUIRED = True


ENCRYPTION_KEY = ''

# Suppress unnecessary reCAPTCHA test key errors in dev
#SILENCED_SYSTEM_CHECKS = ['captcha.recaptcha_test_key_error']

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# settings.py
CELERY_SECURITY_SETTINGS = {
    'task_serializer': 'auth',
    'result_serializer': 'auth',
    'accept_content': ['application/json'],
}

# Retrieve the encryption key from an environment variable,
# or generate one if itâ€™s not set (you should generate it once and keep it safe).
FERNET_KEY = os.environ.get('FERNET_KEY') or Fernet.generate_key().decode()

# For testing in console:
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# Email backend configuration for Django
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'         # SMTP server for Gmail
EMAIL_PORT = 587                       # Port for TLS
EMAIL_USE_TLS = True                   # Use TLS for secure connection
EMAIL_HOST_USER = 'youremail'  # Your email address
EMAIL_HOST_PASSWORD = 'app-password'  # Gmail app password, not your email password




